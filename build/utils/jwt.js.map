{"version":3,"sources":["../../src/utils/jwt.js"],"names":["secretKey","process","env","SECRET","Jwt","generateToken","payload","secret","token","jwt","sign","expiresIn","verifyToken","decoded","verify"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,MAA9B;AAEA;;;;;;AAKe,MAAMC,GAAN,CAAU;AACvB;;;;;;;AAOA,eAAaC,aAAb,CAA2BC,OAA3B,EAAoCC,MAAM,GAAGP,SAA7C,EAAwD;AACtD,UAAMQ,KAAK,GAAG,MAAMC,sBAAIC,IAAJ,CAASJ,OAAT,EAAkBC,MAAlB,EAA0B;AAAEI,MAAAA,SAAS,EAAE;AAAb,KAA1B,CAApB;AACA,WAAOH,KAAP;AACD;AAED;;;;;;;;;AAOA,eAAaI,WAAb,CAAyBJ,KAAzB,EAAgCD,MAAM,GAAGP,SAAzC,EAAoD;AAClD,UAAMa,OAAO,GAAG,MAAMJ,sBAAIK,MAAJ,CAAWN,KAAX,EAAkBD,MAAlB,CAAtB;AACA,WAAOM,OAAP;AACD;;AAvBsB","sourcesContent":["import { config } from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport 'dotenv/config';\n\nconfig();\n\nconst secretKey = process.env.SECRET;\n\n/**\n * @class Jwt\n * @description class for token generation and verification\n * @exports Jwt\n */\nexport default class Jwt {\n  /**\n   * @method generateToken\n   * @description Method to generate new token\n   * @param {object} payload - The data used to generate the token\n   * @param {string} secret - The secret key used to generate the token\n   * @returns {string} the generated token\n   */\n  static async generateToken(payload, secret = secretKey) {\n    const token = await jwt.sign(payload, secret, { expiresIn: '1d' });\n    return token;\n  }\n\n  /**\n   * @method verifyToken\n   * @description Method to decode the token\n   * @param {string} token - The token to be verified\n   * @param {string} secret - The secret key used to generate the token\n   * @returns {object} the payload decoded from the token\n   */\n  static async verifyToken(token, secret = secretKey) {\n    const decoded = await jwt.verify(token, secret);\n    return decoded;\n  }\n}\n"],"file":"jwt.js"}