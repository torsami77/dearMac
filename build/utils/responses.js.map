{"version":3,"sources":["../../src/utils/responses.js"],"names":["messages","signUp","success","error","conflict","signIn","notfound","invalid","unverified","status","unauthorized","created","bad","nocontent","unprocessable","forgeResponse","res","statusCode","message","data","token","response","json","successResponse","userData","errorResponse","conflictResponse"],"mappings":";;;;;;;AAAA;AACA,MAAMA,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE,2BADH;AAENC,IAAAA,KAAK,EAAE,kCAFD;AAGNC,IAAAA,QAAQ,EAAE;AAHJ,GADO;AAMfC,EAAAA,MAAM,EAAE;AACNH,IAAAA,OAAO,EAAE,wBADH;AAENI,IAAAA,QAAQ,EAAE,sBAFJ;AAGNH,IAAAA,KAAK,EAAE,kCAHD;AAINI,IAAAA,OAAO,EAAE,qBAJH;AAKNC,IAAAA,UAAU,EAAE;AALN;AANO,CAAjB;;AAeA,MAAMC,MAAM,GAAG;AACbP,EAAAA,OAAO,EAAE,GADI;AAEbC,EAAAA,KAAK,EAAE,GAFM;AAGbG,EAAAA,QAAQ,EAAE,GAHG;AAIbI,EAAAA,YAAY,EAAE,GAJD;AAKbN,EAAAA,QAAQ,EAAE,GALG;AAMbO,EAAAA,OAAO,EAAE,GANI;AAObC,EAAAA,GAAG,EAAE,GAPQ;AAQbC,EAAAA,SAAS,EAAE,GARE;AASbC,EAAAA,aAAa,EAAE;AATF,CAAf;;;AAYA,MAAMC,aAAa,GAAG,CAACC,GAAD,EAAMC,UAAN,EAAkBC,OAAlB,EAA2BC,IAAI,GAAG,IAAlC,EAAwCC,KAAK,GAAG,IAAhD,KAAyD;AAC7E,QAAMC,QAAQ,GAAG;AACfZ,IAAAA,MAAM,EAAEQ,UADO;AAEfC,IAAAA;AAFe,GAAjB;AAKA,MAAIC,IAAJ,EAAUE,QAAQ,CAACF,IAAT,GAAgBA,IAAhB;AACV,MAAIA,IAAI,IAAIC,KAAZ,EAAmBC,QAAQ,CAACF,IAAT,CAAcC,KAAd,GAAsBA,KAAtB;AAEnB,SAAOJ,GAAG,CAACP,MAAJ,CAAWQ,UAAX,EAAuBK,IAAvB,CAA4BD,QAA5B,CAAP;AACD,CAVD;;AAYA,MAAME,eAAe,GAAG,CAACP,GAAD,EAAMC,UAAN,EACtBC,OADsB,EACbM,QADa,EACHJ,KADG,KACOL,aAAa,CAACC,GAAD,EAAMC,UAAN,EAAkBC,OAAlB,EAA2BM,QAA3B,EAAqCJ,KAArC,CAD5C;;;;AAGA,MAAMK,aAAa,GAAG,CAACT,GAAD,EAAMC,UAAN,EAAkBC,OAAlB,KAA8BH,aAAa,CAACC,GAAD,EAAMC,UAAN,EAAkBC,OAAlB,CAAjE;;;;AAEA,MAAMQ,gBAAgB,GAAG,CAACV,GAAD,EAAMC,UAAN,EAAkBC,OAAlB,KAA8BH,aAAa,CAACC,GAAD,EAAMC,UAAN,EAAkBC,OAAlB,CAApE","sourcesContent":["/* eslint-disable camelcase */\nconst messages = {\n  signUp: {\n    success: 'User Created Successfully',\n    error: 'Could not sign up user try again',\n    conflict: 'User with that email already exist'\n  },\n  signIn: {\n    success: 'Successfully Signed In',\n    notfound: 'User Cannot be found',\n    error: 'Could not sign in user try again',\n    invalid: 'Invalid Credentials',\n    unverified: 'Email not verified, check your mail to verify'\n  }\n};\n  \nconst status = {\n  success: 200,\n  error: 500,\n  notfound: 404,\n  unauthorized: 401,\n  conflict: 409,\n  created: 201,\n  bad: 400,\n  nocontent: 204,\n  unprocessable: 422,\n};\n  \nconst forgeResponse = (res, statusCode, message, data = null, token = null) => {\n  const response = {\n    status: statusCode,\n    message\n  };\n  \n  if (data) response.data = data;\n  if (data && token) response.data.token = token;\n  \n  return res.status(statusCode).json(response);\n};\n  \nconst successResponse = (res, statusCode,\n  message, userData, token) => forgeResponse(res, statusCode, message, userData, token);\n  \nconst errorResponse = (res, statusCode, message) => forgeResponse(res, statusCode, message);\n  \nconst conflictResponse = (res, statusCode, message) => forgeResponse(res, statusCode, message);\n  \nexport {\n  status,\n  successResponse,\n  errorResponse,\n  messages,\n  conflictResponse,\n};\n"],"file":"responses.js"}