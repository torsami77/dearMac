{"version":3,"sources":["../src/app.js"],"names":["PORT","process","env","app","allowCrossDomain","req","res","next","header","use","bodyParser","json","urlencoded","extended","text","type","express","static","isProduction","NODE_ENV","get","sendFile","path","resolve","router","err","Error","status","console","log","stack","errors","message","error","listen"],"mappings":"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","sourcesContent":["import { config } from 'dotenv';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport path from 'path';\nimport router from './routes';\n\nconfig();\n\nconst PORT = process.env.PORT || 5000;\n// Create global app object\nconst app = express();\n\nconst allowCrossDomain = (req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET,PATCH,POST,DELETE');\n  res.header('Access-Control-Allow-Headers', 'Content-Type');\n  next();\n};\n\n// Normal express config defaults\napp.use(allowCrossDomain);\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.text());\napp.use(bodyParser.json({ type: 'application/json' }));\napp.use(express.static('./ui'));\napp.use(cookieParser());\n\nconst isProduction = process.env.NODE_ENV === 'production';\n// base route response\napp.get('/', (req, res) => {\n  res.sendFile(path.resolve('./ui/index.html'));\n});\n\napp.use('/api/v1/', router);\n\n// catch 404 and forward to error handler\napp.use((req, res, next) => {\n  const err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// development error handler\n// will print stacktrace\nif (!isProduction) {\n  app.use((err, req, res, next) => {\n    // eslint-disable-next-line no-console\n    console.log(err.stack);\n    res.status(err.status || 500).json({\n      errors: {\n        message: err.message,\n        error: err,\n      },\n    });\n  });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use((err, req, res, next) => {\n  res.status(err.status || 500).json({\n    errors: {\n      message: err.message,\n      error: {},\n    },\n  });\n});\n\n\napp.listen(PORT, () => {\n  console.log(`server running on port ${PORT}`);\n});\n\nexport default app;\n"],"file":"app.js"}