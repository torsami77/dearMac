{"version":3,"sources":["../../src/controllers/users.js"],"names":["baseUrl","getCallbackUrls","UsersController","signUpUser","req","res","email","body","userExits","models","users","findOne","where","status","conflict","messages","signUp","notifications","user","create","response","toJSON","id","first_name","token","Jwt","generateToken","link","services","sendEmail","created","success","error","updatePassword","password","userData","update","is_verified","signInUser","unauthorized","signIn","invalid","last_name","pictures","unverified","isPasswordValid","bcrypt","comparePassword","forgotPassword","message"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport models from '../models';\nimport * as services from '../services';\nimport {\n  status, messages, hashPassword, generateToken,\n  successResponse, errorResponse, conflictResponse, Jwt, bcrypt, getCallbackUrls\n} from '../utils/index';\n\nconst { baseUrl } = getCallbackUrls;\n\n/**\n * @class UserController\n * @description Controllers for Users\n * @exports UsersController\n */\nexport default class UsersController {\n  /**\n   * @method signUpUser\n   * @description Method for user registration\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} response body object\n   */\n  static async signUpUser(req, res) {\n    try {\n      const { email } = req.body;\n      const userExits = await models.users.findOne({ where: { email } });\n      if (userExits) {\n        return conflictResponse(res, status.conflict, messages.signUp.conflict);\n      }\n      req.body.notifications = 0;\n      const user = await models.users.create(req.body);\n      const response = user.toJSON();\n      // eslint-disable-next-line camelcase\n      const { id, first_name } = user;\n      const token = await Jwt.generateToken({ id, first_name });\n      const link = `${baseUrl}/users/createpassword?token=${token}`;\n      await services.sendEmail(email, 'welcome', { first_name, link });\n      return successResponse(res, status.created, messages.signUp.success, response, token);\n    } catch (error) {\n      return errorResponse(res, status.error, messages.signUp.error);\n    }\n  }\n\n  \n  /**\n   * @method updatePassword\n   * @description Method for updating password\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} response body object\n   */\n  static async updatePassword(req, res) {\n    const { id } = req.user;\n    req.body.password = await hashPassword(req.body.password);\n\n    try {\n      // eslint-disable-next-line max-len\n      const userData = await models.users.update({ is_verified: true, password: req.body.password }, {\n        where: { id }\n      });\n      if (userData) {\n        return successResponse(res, 200, 'Password Updated successful. login to update your profile');\n      }\n    } catch (error) {\n      errorResponse(res, 403, 'Account confirmation link Invalid');\n    }\n  }\n\n  /**\n   * @method signInUser\n   * @description Method for user sign in\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} response body object\n   */\n  static async signInUser(req, res) {\n    try {\n      const { email, password } = req.body;\n      const user = await models.users.findOne({ where: { email } });\n      if (!user) {\n        return errorResponse(res, status.unauthorized, messages.signIn.invalid);\n      }\n      const {\n        id, first_name, last_name, is_verified, pictures, notifications\n      } = user;\n\n      if (!is_verified) {\n        return errorResponse(res, status.unauthorized, messages.signIn.unverified);\n      }\n      const isPasswordValid = await bcrypt.comparePassword(user.password, password);\n\n      if (!isPasswordValid) {\n        return errorResponse(res, status.unauthorized, messages.signIn.invalid);\n      }\n\n      const response = {\n        id, first_name, last_name, is_verified, pictures, notifications\n      };\n      const token = await Jwt.generateToken({ id });\n      return successResponse(res, status.success, messages.signIn.success, response, token);\n    } catch (error) {\n      return errorResponse(res, status.error, messages.signIn.error);\n    }\n  }\n\n\n  /**\n   * @method forgotPassword\n   * @description Method for user registration\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} response body object\n   */\n  static async forgotPassword(req, res) {\n    try {\n      const { email } = req.body;\n      const userExits = await models.users.findOne({ where: { email } });\n      if (!userExits) {\n        return errorResponse(res, 404, 'No user with email');\n      }\n      const { id, first_name } = userExits;\n      const token = await Jwt.generateToken({ id, first_name });\n      const link = `${baseUrl}/users/createPassword?token=${token}`;\n      await services.sendEmail(email, 'welcome', { first_name, link });\n      return successResponse(res, status.success, 'Password Reset Link sent Successfuly', { id, first_name, email }, token);\n    } catch (error) {\n      return errorResponse(res, 500, error.message);\n    }\n  }\n}\n"],"file":"users.js"}