{"version":3,"sources":["../../../src/validation/validators/rules.js"],"names":["nameRegex","checkEmail","input","message","not","isEmpty","isEmail","withMessage","validateEmail","signUp","custom","value","validatePhoneNumber","validate","Error","matches","trim","isIn","exists","isISO8601","updatePassword","isLength","min","req","body","password","signIn"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;AAEA;;;;;;;;;;AAUA,MAAMA,SAAS,GAAG,qBAAlB;;AAEA,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB,4BAAKD,KAAL,EACpCE,GADoC,GAEpCC,OAFoC,GAGpCC,OAHoC,GAIpCC,WAJoC,CAIxBJ,OAJwB,CAAvC;;AAMO,MAAMK,aAAa,GAAG,CAC3BP,UAAU,CAAC,OAAD,EAAU,8BAAV,CADiB,CAAtB;;AAIA,MAAMQ,MAAM,GAAG,CACpB,4BAAK,OAAL,EAAc,8BAAd,EACGH,OADH,GAEGF,GAFH,GAGGC,OAHH,EADoB,EAKpB,4BAAK,eAAL,EAAsBK,MAAtB,CAA8BC,KAAD,IAAW;AACtC,MAAIC,mCAAoBC,QAApB,CAA6BF,KAA7B,MAAwC,IAA5C,EAAkD;AAChD,UAAM,IAAIG,KAAJ,CAAU,uBAAV,CAAN;AACD;;AACD,SAAO,IAAP;AACD,CALD,CALoB,EAWpB,4BAAK,YAAL,EAAmB,4DAAnB,EACGC,OADH,CACWf,SADX,EAEGgB,IAFH,EAXoB,EAcpB,4BAAK,WAAL,EAAkB,2DAAlB,EACGD,OADH,CACWf,SADX,EAEGgB,IAFH,EAdoB,EAiBpB,4BAAK,QAAL,EAAe,wBAAf,EAAyCC,IAAzC,CAA8C,CAAC,MAAD,EAAS,QAAT,CAA9C,CAjBoB,EAkBpB,4BAAK,gBAAL,EAAuB,gCAAvB,EAAyDA,IAAzD,CAA8D,CAAC,QAAD,EAAW,SAAX,EAAsB,UAAtB,EAAkC,SAAlC,CAA9D,CAlBoB,EAmBpB,4BAAK,eAAL,EAAsB,oDAAtB,EACGC,MADH,GAEGd,GAFH,GAGGC,OAHH,GAIGc,SAJH,CAIa,YAJb,CAnBoB,EAwBpB,4BAAK,iBAAL,EAAwB,gCAAxB,EAA0DF,IAA1D,CAA+D,CAAC,UAAD,EAAa,MAAb,EAAqB,UAArB,EAAiC,iBAAjC,EAAoD,OAApD,EAA6D,SAA7D,EAAwE,SAAxE,EAAmF,UAAnF,EAA+F,YAA/F,CAA/D,CAxBoB,EAyBpB,4BAAK,kBAAL,EAAyB,kCAAzB,EACGC,MADH,GAEGd,GAFH,GAGGC,OAHH,EAzBoB,EA6BpB,4BAAK,iBAAL,EAAwB,iCAAxB,EACGa,MADH,GAEGd,GAFH,GAGGC,OAHH,EA7BoB,EAiCpB,4BAAK,gCAAL,EAAuC,8CAAvC,EAAuFY,IAAvF,CAA4F,CAAC,aAAD,EAAgB,SAAhB,EAA2B,oBAA3B,EAAiD,aAAjD,EAAgE,QAAhE,EAA0E,QAA1E,CAA5F,CAjCoB,EAkCpB,4BAAK,qBAAL,EAA4B,qCAA5B,EACGC,MADH,GAEGd,GAFH,GAGGC,OAHH,EAlCoB,CAAf;;AAwCA,MAAMe,cAAc,GAAG,CAC5B,4BAAK,UAAL,EAAiB,0CAAjB,EAA6DC,QAA7D,CAAsE;AAAEC,EAAAA,GAAG,EAAE;AAAP,CAAtE,CAD4B,EAE5B,4BAAK,iBAAL,EAAwBZ,MAAxB,CAA+B,CAACC,KAAD,EAAQ;AAAEY,EAAAA;AAAF,CAAR,KAAoB;AACjD,MAAIZ,KAAK,KAAKY,GAAG,CAACC,IAAJ,CAASC,QAAvB,EAAiC;AAC/B,UAAM,IAAIX,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,SAAO,IAAP;AACD,CALD,CAF4B,CAAvB;;AAUA,MAAMY,MAAM,GAAG,CACpB,4BAAK,OAAL,EAAc,+CAAd,EACGpB,OADH,GAEGF,GAFH,GAGGC,OAHH,EADoB,EAKpB,4BAAK,UAAL,EAAiB,0CAAjB,EACGgB,QADH,CACY;AAAEC,EAAAA,GAAG,EAAE;AAAP,CADZ,EAEGlB,GAFH,GAGGC,OAHH,EALoB,CAAf","sourcesContent":["import { body, param } from 'express-validator';\nimport validatePhoneNumber from 'validate-phone-number-node-js';\n\n// add validation rules here.\n\n/* regex description\nthe regex /^[A-Za-z\\-']{2,250}$/\nis made up of a single character set, between\n[], with a quantifier {2,250}\nA-Za-z => matches upper and lowercase alphabets\n\\-' => matches a - and a '\nthe last {2,250} is a quantifier specifying that the character been matched\nshould be > 1 and <= 250\nthe ^ and $ runs the match from the beginning and end of the string\n*/\nconst nameRegex = /^[A-Za-z\\-']{2,20}$/;\n\nconst checkEmail = (input, message) => body(input)\n  .not()\n  .isEmpty()\n  .isEmail()\n  .withMessage(message);\n\nexport const validateEmail = [\n  checkEmail('email', 'Please provide a valid email')\n];\n\nexport const signUp = [\n  body('email', 'Please provide a valid email')\n    .isEmail()\n    .not()\n    .isEmpty(),\n  body('mobile_number').custom((value) => {\n    if (validatePhoneNumber.validate(value) !== true) {\n      throw new Error('Invalid mobile number');\n    }\n    return true;\n  }),\n  body('first_name', 'First name should be alphabets between 2 and 20 characters')\n    .matches(nameRegex)\n    .trim(),\n  body('last_name', 'Last name should be alphabets between 2 and 20 characters')\n    .matches(nameRegex)\n    .trim(),\n  body('gender', 'Please indicate gender').isIn(['male', 'female']),\n  body('marital_status', 'Please indicate marital status').isIn(['single', 'married', 'divorced', 'widowed']),\n  body('date_of_birth', 'Date of birth must be in correct format yyyy:mm:dd')\n    .exists()\n    .not()\n    .isEmpty()\n    .isISO8601('yyyy-mm-dd'),\n  body('career_industry', 'Please idicate career industry').isIn(['aviation', 'arts', 'business', 'law enforcement', 'media', 'medical', 'service', 'teaching', 'technology']),\n  body('name_of_employer', 'Name of employer cannot be empty')\n    .exists()\n    .not()\n    .isEmpty(),\n  body('job_description', 'Job description cannot be empty')\n    .exists()\n    .not()\n    .isEmpty(),\n  body('highest_academic_qualification', 'Name indicate highest academic qualification').isIn(['High School', 'Diploma', 'HND/B.A./B.Sc/B.Ed', 'M.A./P.G.D.', 'P.H.D.', 'Others']),\n  body('name_of_institution', 'Name of institution cannot be empty')\n    .exists()\n    .not()\n    .isEmpty(),\n];\n\nexport const updatePassword = [\n  body('password', 'password should be at least 6 characters').isLength({ min: 6 }),\n  body('confirmPassword').custom((value, { req }) => {\n    if (value !== req.body.password) {\n      throw new Error('Password confirmation does not match');\n    }\n    return true;\n  })\n];\n\nexport const signIn = [\n  body('email', 'email is invalid, please provide a valid mail')\n    .isEmail()\n    .not()\n    .isEmpty(),\n  body('password', 'password should be at least 6 characters')\n    .isLength({ min: 6 })\n    .not()\n    .isEmpty(),\n];\n"],"file":"rules.js"}