{"version":3,"sources":["../../src/middlewares/authenticate.js"],"names":["Sequelize","models","Authenticate","verifyToken","req","res","next","headers","authorization","token","split","decoded","id","user","error","verifyAdmin","userId","condition","where","role","Op","or","verify","findSuperUser"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,eAAtB;AACA;;;;;;AAKA,MAAMC,YAAN,CAAmB;AACjB;;;;;;;AAOA,eAAaC,WAAb,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACvC,QAAI;AACF,YAAM;AAAEC,QAAAA,OAAO,EAAE;AAAEC,UAAAA;AAAF;AAAX,UAAiCJ,GAAvC;AACA,YAAMK,KAAK,GAAGD,aAAa,CAACE,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAd;;AACA,UAAI,CAACD,KAAD,IAAUA,KAAK,KAAK,EAAxB,EAA4B;AAC1B,eAAO,0BAAcJ,GAAd,EAAmB,GAAnB,EAAwB,gBAAxB,CAAP;AACD;;AACD,YAAMM,OAAO,GAAG,MAAM,wBAAYF,KAAZ,CAAtB;;AACA,UAAI,EAAEE,OAAO,IAAIA,OAAO,CAACC,EAArB,CAAJ,EAA8B;AAC5B,eAAO,0BAAcP,GAAd,EAAmB,GAAnB,EAAwB,yCAAxB,CAAP;AACD;;AACDD,MAAAA,GAAG,CAACS,IAAJ,GAAWF,OAAX;AACA,aAAOL,IAAI,EAAX;AACD,KAZD,CAYE,OAAOQ,KAAP,EAAc;AACd,aAAO,0BAAcT,GAAd,EAAmB,GAAnB,EAAwB,cAAxB,CAAP;AACD;AACF;AAED;;;;;;;;;AAOA,eAAaU,WAAb,CAAyBX,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACvC,UAAM;AAAEU,MAAAA;AAAF,QAAaZ,GAAG,CAACS,IAAvB;AACA,UAAMI,SAAS,GAAG;AAChBC,MAAAA,KAAK,EAAE;AACLF,QAAAA,MADK;AACGG,QAAAA,IAAI,EAAE;AAAE,WAACnB,SAAS,CAACoB,EAAV,CAAaC,EAAd,GAAmB,CAAC,OAAD,EAAU,aAAV;AAArB;AADT;AADS,KAAlB;;AAKA,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMpB,YAAY,CAACqB,aAAb,CAA2BN,SAA3B,CAArB;;AACA,UAAI,CAACK,MAAL,EAAa;AACX,eAAO,0BAAcjB,GAAd,EAAmB,GAAnB,EAAwB,gBAAxB,CAAP;AACD;;AACD,aAAOC,IAAI,EAAX;AACD,KAND,CAME,OAAOQ,KAAP,EAAc;AACd,aAAO,0BAAcT,GAAd,EAAmB,GAAnB,EAAwB,cAAxB,CAAP;AACD;AACF;;AAjDgB;;eAoDJH,Y","sourcesContent":["import { verifyToken, errorResponse } from '../utils';\nimport models from '../models';\n\nconst { Sequelize } = models;\n/**\n * @class Authenticate\n * @description authenticate tokens and roles\n * @exports Authenticate\n */\nclass Authenticate {\n  /**\n   * Verify if token is valid\n   * @param  {object} req - The user request object\n   * @param  {object} res - The user res response object\n   * @param  {function} next - The next() Function\n   * @returns {String} req.userId - The user id\n   */\n  static async verifyToken(req, res, next) {\n    try {\n      const { headers: { authorization } } = req;\n      const token = authorization.split(' ')[1];\n      if (!token || token === '') {\n        return errorResponse(res, 401, 'Access denied.');\n      }\n      const decoded = await verifyToken(token);\n      if (!(decoded && decoded.id)) {\n        return errorResponse(res, 401, 'Access denied. We could not verify user');\n      }\n      req.user = decoded;\n      return next();\n    } catch (error) {\n      return errorResponse(res, 500, 'Server error');\n    }\n  }\n\n  /**\n   * Verify if role is Admin or Super Admin\n   * @param  {object} req - The user request object\n   * @param  {object} res - The user res response object\n   * @param  {function} next - The next() Function\n   * @returns {String} req.userId - The user id\n   */\n  static async verifyAdmin(req, res, next) {\n    const { userId } = req.user;\n    const condition = {\n      where: {\n        userId, role: { [Sequelize.Op.or]: ['Admin', 'Super Admin'] }\n      },\n    };\n    try {\n      const verify = await Authenticate.findSuperUser(condition);\n      if (!verify) {\n        return errorResponse(res, 401, 'Access denied.');\n      }\n      return next();\n    } catch (error) {\n      return errorResponse(res, 500, 'Server error');\n    }\n  }\n}\n\nexport default Authenticate;\n"],"file":"authenticate.js"}